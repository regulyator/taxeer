// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO taxeer_user (telegram_user_id, chat_id)
VALUES ($1, $2)
RETURNING id, telegram_user_id, chat_id
`

type CreateUserParams struct {
	TelegramUserID string
	ChatID         int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (TaxeerUser, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.TelegramUserID, arg.ChatID)
	var i TaxeerUser
	err := row.Scan(&i.ID, &i.TelegramUserID, &i.ChatID)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, telegram_user_id, chat_id
FROM taxeer_user
WHERE telegram_user_id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, telegramUserID string) (TaxeerUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, telegramUserID)
	var i TaxeerUser
	err := row.Scan(&i.ID, &i.TelegramUserID, &i.ChatID)
	return i, err
}

const updateUserChatId = `-- name: UpdateUserChatId :exec
UPDATE taxeer_user
SET chat_id = $2
WHERE id = $1
`

type UpdateUserChatIdParams struct {
	ID     uuid.UUID
	ChatID int64
}

func (q *Queries) UpdateUserChatId(ctx context.Context, arg UpdateUserChatIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserChatId, arg.ID, arg.ChatID)
	return err
}
